package ru.detmir.sap.mapping.tests;

import com.sap.aii.mapping.api.StreamTransformationException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import ru.detmir.sap.mapping.JAVA_OnlineChequeXMLToJSON;
import ru.detmir.sap.mapping.tests.mocks.TransformationInputMockImpl;
import ru.detmir.sap.mapping.tests.mocks.TransformationOutputMockImpl;

public class MappingTest {
    @Test
    public void test() throws StreamTransformationException {
        String testString = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                           "<ns1:SalesEmailCheckRequest xmlns:ns1=\"urn:DetMir.ru:Hybris:Finance\"><externalId>1ca7e3fc-ca3f-40cb-8009-93389ae2c200</externalId><retailTransactionNumber>3200067100000004</retailTransactionNumber><totalAmount>948.00</totalAmount><totalDiscount>549</totalDiscount><type>refund</type><retailCalendarDay>2023/02/14</retailCalendarDay><atolData><payload><ecrRegistrationNumber>2545845325046800</ecrRegistrationNumber><fiscalDocumentAttribute>363631309</fiscalDocumentAttribute><fiscalDocumentNumber>779</fiscalDocumentNumber><fiscalReceiptNumber>2</fiscalReceiptNumber><fnNumber>9999078902009035</fnNumber><fnsSite>nalog.ru</fnsSite><ofdInn>7729355029</ofdInn><receiptDatetime>2023-02-14T17:07:00.000Z</receiptDatetime><shiftNumber>114</shiftNumber><total>948.00</total></payload><status>done</status></atolData><createdTsSource>1676383636000</createdTsSource><channel>offline</channel><msgId></msgId><items><discountInfo><amountPerItem>16.67</amountPerItem><code>3301</code></discountInfo><discountInfo><amountPerItem>-199.68000</amountPerItem><code>3301</code></discountInfo><itemType>product</itemType><ndsCode>NDS_10</ndsCode><position>1</position><price>315.99</price><productCode>4610037049291</productCode><productName>Сапожки для девочек:Розовый:22-</productName><quantity>1</quantity></items><items><discountInfo><amountPerItem>16.66</amountPerItem><code>3301</code></discountInfo><discountInfo><amountPerItem>-199.65000</amountPerItem><code>3301</code></discountInfo><itemType>product</itemType><ndsCode>NDS_10</ndsCode><position>2</position><price>316.01</price><productCode>4610037049291</productCode><productName>Сапожки для девочек:Розовый:22-</productName><quantity>1</quantity></items><items><discountInfo><amountPerItem>16.67</amountPerItem><code>3301</code></discountInfo><discountInfo><amountPerItem>-199.67000</amountPerItem><code>3301</code></discountInfo><itemType>product</itemType><ndsCode>NDS_10</ndsCode><position>3</position><price>316.00</price><productCode>4610037049291</productCode><productName>Сапожки для девочек:Розовый:22-</productName><quantity>1</quantity></items><prepaid>false</prepaid><loyalty><barcode>2226680028278565</barcode><transactionId>20230214170611953X856C145D6BA803F3</transactionId></loyalty><cashier>Наумова Н.В.</cashier><posId>2024</posId><address>121212  г.Москва  3-й Нижнелихоборский</address><placeOfSettlement>Тестовый стенд</placeOfSettlement><chain>detmir</chain><bonusCard>2226680028278565</bonusCard><redeemed>0</redeemed><awarded>5000</awarded><loyaltyBalance>4556155</loyaltyBalance><loyaltyInactivePoints>30</loyaltyInactivePoints><mustBeSent>false</mustBeSent><paymentMethod>card</paymentMethod></ns1:SalesEmailCheckRequest>";

        JAVA_OnlineChequeXMLToJSON javaOnlineChequeXMLToJSON = new JAVA_OnlineChequeXMLToJSON();
        TransformationOutputMockImpl outputMock = new TransformationOutputMockImpl();
        javaOnlineChequeXMLToJSON.transform(new TransformationInputMockImpl(testString), outputMock);
        System.out.println(outputMock.getOutputPayload().getOutputStream());


        String expectedResult = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                                "<ns1:CommonKafkaMessageRequest xmlns:ns1=\"urn:DetMir.ru:Hybris:Common\"><server>server</server><topicName>topicName</topicName><data>eyJleHRlcm5hbElkIjoiMWNhN2UzZmMtY2EzZi00MGNiLTgwMDktOTMzODlhZTJjMjAwIiwicmV0YWlsVHJhbnNhY3Rpb25OdW1iZXIiOiIzMjAwMDY3MTAwMDAwMDA0IiwicmV0YWlsQ2FsZW5kYXJEYXkiOiIyMDIzLzAyLzE0IiwidG90YWxBbW91bnQiOjk0OC4wMCwidG90YWxEaXNjb3VudCI6NTQ5LCJ0eXBlIjoicmVmdW5kIiwiYXRvbERhdGEiOnsic3RhdHVzIjoiZG9uZSIsInBheWxvYWQiOnsiZWNyUmVnaXN0cmF0aW9uTnVtYmVyIjoiMjU0NTg0NTMyNTA0NjgwMCIsImZpc2NhbERvY3VtZW50QXR0cmlidXRlIjozNjM2MzEzMDksImZpc2NhbERvY3VtZW50TnVtYmVyIjo3NzksImZpc2NhbFJlY2VpcHROdW1iZXIiOjIsImZuTnVtYmVyIjo5OTk5MDc4OTAyMDA5MDM1LCJmbnNTaXRlIjoibmFsb2cucnUiLCJyZWNlaXB0RGF0ZXRpbWUiOiIxNC4wMi4yMDIzIDIwOjA3OjAwIiwic2hpZnROdW1iZXIiOiIxMTQiLCJ0b3RhbCI6Ijk0OC4wMCIsIm9mZElubiI6Ijc3MjkzNTUwMjkifX0sImNyZWF0ZWRUc1NvdXJjZSI6MTY3NjM4MzYzNjAwMCwibXNnSWQiOiIiLCJjaGFubmVsIjoib2ZmbGluZSIsIml0ZW1zIjpbeyJpdGVtVHlwZSI6InByb2R1Y3QiLCJwcm9kdWN0TmFtZSI6ItCh0LDQv9C+0LbQutC4INC00LvRjyDQtNC10LLQvtGH0LXQujrQoNC+0LfQvtCy0YvQuToyMi0iLCJwcm9kdWN0Q29kZSI6IjQ2MTAwMzcwNDkyOTEiLCJxdWFudGl0eSI6MSwicHJpY2UiOjMxNS45OSwicG9zaXRpb24iOjEsIm5kc0NvZGUiOiJORFNfMTAiLCJkaXNjb3VudEluZm8iOlt7ImNvZGUiOiIzMzAxIiwiYW1vdW50UGVySXRlbSI6MTYuNjd9LHsiY29kZSI6IjMzMDEiLCJhbW91bnRQZXJJdGVtIjotMTk5LjY4MDAwfV19LHsiaXRlbVR5cGUiOiJwcm9kdWN0IiwicHJvZHVjdE5hbWUiOiLQodCw0L/QvtC20LrQuCDQtNC70Y8g0LTQtdCy0L7Rh9C10Lo60KDQvtC30L7QstGL0Lk6MjItIiwicHJvZHVjdENvZGUiOiI0NjEwMDM3MDQ5MjkxIiwicXVhbnRpdHkiOjEsInByaWNlIjozMTYuMDEsInBvc2l0aW9uIjoyLCJuZHNDb2RlIjoiTkRTXzEwIiwiZGlzY291bnRJbmZvIjpbeyJjb2RlIjoiMzMwMSIsImFtb3VudFBlckl0ZW0iOjE2LjY2fSx7ImNvZGUiOiIzMzAxIiwiYW1vdW50UGVySXRlbSI6LTE5OS42NTAwMH1dfSx7Iml0ZW1UeXBlIjoicHJvZHVjdCIsInByb2R1Y3ROYW1lIjoi0KHQsNC/0L7QttC60Lgg0LTQu9GPINC00LXQstC+0YfQtdC6OtCg0L7Qt9C+0LLRi9C5OjIyLSIsInByb2R1Y3RDb2RlIjoiNDYxMDAzNzA0OTI5MSIsInF1YW50aXR5IjoxLCJwcmljZSI6MzE2LjAwLCJwb3NpdGlvbiI6MywibmRzQ29kZSI6Ik5EU18xMCIsImRpc2NvdW50SW5mbyI6W3siY29kZSI6IjMzMDEiLCJhbW91bnRQZXJJdGVtIjoxNi42N30seyJjb2RlIjoiMzMwMSIsImFtb3VudFBlckl0ZW0iOi0xOTkuNjcwMDB9XX1dLCJwcmVwYWlkIjpmYWxzZSwibG95YWx0eSI6eyJ0cmFuc2FjdGlvbklkIjoiMjAyMzAyMTQxNzA2MTE5NTNYODU2QzE0NUQ2QkE4MDNGMyIsImJhcmNvZGUiOiIyMjI2NjgwMDI4Mjc4NTY1In0sImNhc2hpZXIiOiLQndCw0YPQvNC+0LLQsCDQnS7Qki4iLCJwb3NJZCI6IjIwMjQiLCJhZGRyZXNzIjoiMTIxMjEyICDQsy7QnNC+0YHQutCy0LAgIDMt0Lkg0J3QuNC20L3QtdC70LjRhdC+0LHQvtGA0YHQutC40LkiLCJwbGFjZU9mU2V0dGxlbWVudCI6ItCi0LXRgdGC0L7QstGL0Lkg0YHRgtC10L3QtCIsImNoYWluIjoiZGV0bWlyIiwiYm9udXNDYXJkIjoiMjIyNjY4MDAyODI3ODU2NSIsInJlZGVlbWVkIjowLCJhd2FyZGVkIjo1MDAwLCJsb3lhbHR5QmFsYW5jZSI6NDU1NjE1NSwibG95YWx0eUluYWN0aXZlUG9pbnRzIjozMCwibXVzdEJlU2VudCI6ZmFsc2UsInBheW1lbnRNZXRob2QiOiJjYXJkIn0=</data></ns1:CommonKafkaMessageRequest>";
        Assertions.assertEquals(outputMock.getOutputPayload().getOutputStream().toString(), expectedResult);
    }
}
